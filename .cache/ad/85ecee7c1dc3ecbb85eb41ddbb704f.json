{"id":"js/main.js","dependencies":[{"name":"C:\\Users\\user\\Desktop\\workspace\\parcel-template\\.babelrc.js","includedInParent":true,"mtime":1640693302444},{"name":"C:\\Users\\user\\Desktop\\workspace\\parcel-template\\package.json","includedInParent":true,"mtime":1640693123830}],"generated":{"js":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nconsole.log('hello');\n\nfunction test() {\n  return _test.apply(this, arguments);\n}\n\nfunction _test() {\n  _test = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    var promise;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            promise = Promise.resolve(123);\n            _context.t0 = console;\n            _context.next = 4;\n            return promise;\n\n          case 4:\n            _context.t1 = _context.sent;\n\n            _context.t0.log.call(_context.t0, _context.t1);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _test.apply(this, arguments);\n}\n\ntest();"},"sourceMaps":{"js":{"mappings":[{"name":"console","generated":{"line":5,"column":0},"source":"js/main.js","original":{"line":1,"column":0}},{"generated":{"line":5,"column":7},"source":"js/main.js","original":{"line":1,"column":7}},{"name":"log","generated":{"line":5,"column":8},"source":"js/main.js","original":{"line":1,"column":8}},{"generated":{"line":5,"column":11},"source":"js/main.js","original":{"line":1,"column":0}},{"generated":{"line":5,"column":12},"source":"js/main.js","original":{"line":1,"column":12}},{"generated":{"line":5,"column":19},"source":"js/main.js","original":{"line":1,"column":0}},{"name":"test","generated":{"line":7,"column":9},"source":"js/main.js","original":{"line":3,"column":15}},{"generated":{"line":12,"column":66},"source":"js/main.js","original":{"line":3,"column":0}},{"generated":{"line":13,"column":0},"source":"js/main.js","original":{"line":3,"column":0}},{"generated":{"line":14,"column":0},"source":"js/main.js","original":{"line":3,"column":0}},{"generated":{"line":15,"column":0},"source":"js/main.js","original":{"line":3,"column":0}},{"generated":{"line":16,"column":0},"source":"js/main.js","original":{"line":3,"column":0}},{"generated":{"line":17,"column":0},"source":"js/main.js","original":{"line":3,"column":0}},{"name":"promise","generated":{"line":18,"column":0},"source":"js/main.js","original":{"line":4,"column":7}},{"name":"promise","generated":{"line":18,"column":12},"source":"js/main.js","original":{"line":4,"column":7}},{"generated":{"line":18,"column":19},"source":"js/main.js","original":{"line":3,"column":0}},{"name":"Promise","generated":{"line":18,"column":22},"source":"js/main.js","original":{"line":4,"column":17}},{"generated":{"line":18,"column":29},"source":"js/main.js","original":{"line":4,"column":24}},{"name":"resolve","generated":{"line":18,"column":30},"source":"js/main.js","original":{"line":4,"column":25}},{"generated":{"line":18,"column":37},"source":"js/main.js","original":{"line":4,"column":17}},{"generated":{"line":18,"column":38},"source":"js/main.js","original":{"line":4,"column":33}},{"generated":{"line":18,"column":41},"source":"js/main.js","original":{"line":4,"column":17}},{"generated":{"line":18,"column":42},"source":"js/main.js","original":{"line":3,"column":0}},{"generated":{"line":19,"column":0},"source":"js/main.js","original":{"line":3,"column":0}},{"name":"console","generated":{"line":19,"column":26},"source":"js/main.js","original":{"line":5,"column":1}},{"generated":{"line":19,"column":33},"source":"js/main.js","original":{"line":3,"column":0}},{"generated":{"line":20,"column":0},"source":"js/main.js","original":{"line":3,"column":0}},{"generated":{"line":21,"column":0},"source":"js/main.js","original":{"line":3,"column":0}},{"name":"promise","generated":{"line":21,"column":19},"source":"js/main.js","original":{"line":5,"column":19}},{"generated":{"line":21,"column":26},"source":"js/main.js","original":{"line":3,"column":0}},{"generated":{"line":23,"column":0},"source":"js/main.js","original":{"line":3,"column":0}},{"generated":{"line":24,"column":0},"source":"js/main.js","original":{"line":3,"column":0}},{"generated":{"line":26,"column":0},"source":"js/main.js","original":{"line":3,"column":0}},{"name":"log","generated":{"line":26,"column":24},"source":"js/main.js","original":{"line":5,"column":9}},{"generated":{"line":26,"column":27},"source":"js/main.js","original":{"line":3,"column":0}},{"generated":{"line":28,"column":0},"source":"js/main.js","original":{"line":3,"column":0}},{"generated":{"line":29,"column":0},"source":"js/main.js","original":{"line":3,"column":0}},{"generated":{"line":30,"column":0},"source":"js/main.js","original":{"line":3,"column":0}},{"generated":{"line":31,"column":0},"source":"js/main.js","original":{"line":3,"column":0}},{"generated":{"line":32,"column":0},"source":"js/main.js","original":{"line":3,"column":0}},{"generated":{"line":33,"column":0},"source":"js/main.js","original":{"line":3,"column":0}},{"generated":{"line":34,"column":0},"source":"js/main.js","original":{"line":3,"column":0}},{"name":"test","generated":{"line":38,"column":0},"source":"js/main.js","original":{"line":7,"column":0}},{"generated":{"line":38,"column":4},"source":"js/main.js","original":{"line":7,"column":4}}],"sources":{"js/main.js":"console.log('hello')\r\n\r\nasync function test() {\r\n\tconst promise = Promise.resolve(123)\r\n\tconsole.log(await promise)\r\n}\r\ntest()"},"lineCount":null}},"error":null,"hash":"bb45464ecf46a743916fce3eee7e873f","cacheData":{"env":{}}}